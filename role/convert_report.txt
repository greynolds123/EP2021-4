/* Report generated by PDK at 2019-09-23 11:02:53 -0700 */


--- metadata.json	2019-09-23 11:02:29.514517517 -0700
+++ metadata.json.pdknew	2019-09-23 11:02:53.445899502 -0700
@@ -8,8 +8,65 @@
   "project_page": "https://github.com/greynolds123/control-repo/tree/production/role",
   "issues_url": "https://github.com/greynolds123/control-repo/tree/production/role",
   "dependencies": [
-    {"name":"puppetlabs-stdlib","version_requirement":">= 1.0.0"}
+    {
+      "name": "puppetlabs-stdlib",
+      "version_requirement": ">= 1.0.0"
+    }
   ],
-  "data_provider": null
+  "operatingsystem_support": [
+    {
+      "operatingsystem": "CentOS",
+      "operatingsystemrelease": [
+        "7"
+      ]
+    },
+    {
+      "operatingsystem": "OracleLinux",
+      "operatingsystemrelease": [
+        "7"
+      ]
+    },
+    {
+      "operatingsystem": "RedHat",
+      "operatingsystemrelease": [
+        "7"
+      ]
+    },
+    {
+      "operatingsystem": "Scientific",
+      "operatingsystemrelease": [
+        "7"
+      ]
+    },
+    {
+      "operatingsystem": "Debian",
+      "operatingsystemrelease": [
+        "8"
+      ]
+    },
+    {
+      "operatingsystem": "Ubuntu",
+      "operatingsystemrelease": [
+        "16.04"
+      ]
+    },
+    {
+      "operatingsystem": "windows",
+      "operatingsystemrelease": [
+        "2008 R2",
+        "2012 R2",
+        "10"
+      ]
+    }
+  ],
+  "requirements": [
+    {
+      "name": "puppet",
+      "version_requirement": ">= 4.10.0 < 7.0.0"
+    }
+  ],
+  "pdk-version": "1.10.0",
+  "template-url": "file:///opt/puppetlabs/pdk/share/cache/pdk-templates.git#1.10.0",
+  "template-ref": "1.10.0-0-gbba9ac3"
 }


--- Gemfile	2019-07-09 16:46:49.000000000 -0700
+++ Gemfile.pdknew	2019-09-23 11:02:53.447021500 -0700
@@ -1,37 +1,72 @@
 source ENV['GEM_SOURCE'] || 'https://rubygems.org'
 
-puppetversion = ENV.key?('PUPPET_VERSION') ? "#{ENV['PUPPET_VERSION']}" : ['>= 3.3']
-gem 'metadata-json-lint'
-gem 'puppet', puppetversion
-gem 'puppetlabs_spec_helper', '>= 1.0.0'
-gem 'puppet-lint', '>= 1.0.0'
-gem 'facter', '>= 1.7.0'
-gem 'rspec-puppet'
+def location_for(place_or_version, fake_version = nil)
+  git_url_regex = %r{\A(?<url>(https?|git)[:@][^#]*)(#(?<branch>.*))?}
+  file_url_regex = %r{\Afile:\/\/(?<path>.*)}
 
-# rspec must be v2 for ruby 1.8.7
-if RUBY_VERSION >= '1.8.7' and RUBY_VERSION < '1.9'
-  gem 'rspec', '~> 2.0'
+  if place_or_version && (git_url = place_or_version.match(git_url_regex))
+    [fake_version, { git: git_url[:url], branch: git_url[:branch], require: false }].compact
+  elsif place_or_version && (file_url = place_or_version.match(file_url_regex))
+    ['>= 0', { path: File.expand_path(file_url[:path]), require: false }]
+  else
+    [place_or_version, { require: false }]
+  end
 end
 
-group :test do
-  gem "rake"
-  gem "puppet", ENV['PUPPET_VERSION'] || '= 4.2.1'
-  gem "rspec-puppet"
-  gem "rspec"
-  gem "puppetlabs_spec_helper"
-  gem 'puppet-catalog-test','~> 0.3.2'
-  gem 'hiera-eyaml'
-end
+ruby_version_segments = Gem::Version.new(RUBY_VERSION.dup).segments
+minor_version = ruby_version_segments[0..1].join('.')
 
 group :development do
-  gem "beaker","~> 2.20.0"
-  gem "beaker-rspec"
-  gem 'rspec_junit_formatter'
-  gem "puppet-blacksmith"
-  gem "guard","~> 2.8.0"
-  gem "guard-rake", '~> 1.0.0'
-  gem 'listen', '~> 2.7.0'
-  gem "ruby_gntp"
-  gem "colorize"
+  gem "fast_gettext", '1.1.0',                         require: false if Gem::Version.new(RUBY_VERSION.dup) < Gem::Version.new('2.1.0')
+  gem "fast_gettext",                                  require: false if Gem::Version.new(RUBY_VERSION.dup) >= Gem::Version.new('2.1.0')
+  gem "json_pure", '<= 2.0.1',                         require: false if Gem::Version.new(RUBY_VERSION.dup) < Gem::Version.new('2.0.0')
+  gem "json", '= 1.8.1',                               require: false if Gem::Version.new(RUBY_VERSION.dup) == Gem::Version.new('2.1.9')
+  gem "json", '= 2.0.4',                               require: false if Gem::Requirement.create('~> 2.4.2').satisfied_by?(Gem::Version.new(RUBY_VERSION.dup))
+  gem "json", '= 2.1.0',                               require: false if Gem::Requirement.create(['>= 2.5.0', '< 2.7.0']).satisfied_by?(Gem::Version.new(RUBY_VERSION.dup))
+  gem "puppet-module-posix-default-r#{minor_version}", require: false, platforms: [:ruby]
+  gem "puppet-module-posix-dev-r#{minor_version}",     require: false, platforms: [:ruby]
+  gem "puppet-module-win-default-r#{minor_version}",   require: false, platforms: [:mswin, :mingw, :x64_mingw]
+  gem "puppet-module-win-dev-r#{minor_version}",       require: false, platforms: [:mswin, :mingw, :x64_mingw]
 end
+
+puppet_version = ENV['PUPPET_GEM_VERSION']
+facter_version = ENV['FACTER_GEM_VERSION']
+hiera_version = ENV['HIERA_GEM_VERSION']
+
+gems = {}
+
+gems['puppet'] = location_for(puppet_version)
+
+# If facter or hiera versions have been specified via the environment
+# variables
+
+gems['facter'] = location_for(facter_version) if facter_version
+gems['hiera'] = location_for(hiera_version) if hiera_version
+
+if Gem.win_platform? && puppet_version =~ %r{^(file:///|git://)}
+  # If we're using a Puppet gem on Windows which handles its own win32-xxx gem
+  # dependencies (>= 3.5.0), set the maximum versions (see PUP-6445).
+  gems['win32-dir'] =      ['<= 0.4.9', require: false]
+  gems['win32-eventlog'] = ['<= 0.6.5', require: false]
+  gems['win32-process'] =  ['<= 0.7.5', require: false]
+  gems['win32-security'] = ['<= 0.2.5', require: false]
+  gems['win32-service'] =  ['0.8.8', require: false]
+end
+
+gems.each do |gem_name, gem_params|
+  gem gem_name, *gem_params
+end
+
+# Evaluate Gemfile.local and ~/.gemfile if they exist
+extra_gemfiles = [
+  "#{__FILE__}.local",
+  File.join(Dir.home, '.gemfile'),
+]
+
+extra_gemfiles.each do |gemfile|
+  if File.file?(gemfile) && File.readable?(gemfile)
+    eval(File.read(gemfile), binding)
+  end
+end
+# vim: syntax=ruby


--- Rakefile	2019-07-09 16:46:49.000000000 -0700
+++ Rakefile.pdknew	2019-09-23 11:02:53.448064496 -0700
@@ -1,18 +1,76 @@
 require 'puppetlabs_spec_helper/rake_tasks'
-require 'puppet-lint/tasks/puppet-lint'
-PuppetLint.configuration.send('disable_80chars')
-PuppetLint.configuration.ignore_paths = ["spec/**/*.pp", "pkg/**/*.pp"]
+require 'puppet-syntax/tasks/puppet-syntax'
+require 'puppet_blacksmith/rake_tasks' if Bundler.rubygems.find_name('puppet-blacksmith').any?
+require 'github_changelog_generator/task' if Bundler.rubygems.find_name('github_changelog_generator').any?
+require 'puppet-strings/tasks' if Bundler.rubygems.find_name('puppet-strings').any?
 
-desc "Validate manifests, templates, and ruby files"
-task :validate do
-  Dir['manifests/**/*.pp'].each do |manifest|
-    sh "puppet parser validate --noop #{manifest}"
+def changelog_user
+  return unless Rake.application.top_level_tasks.include? "changelog"
+  returnVal = nil || JSON.load(File.read('metadata.json'))['author']
+  raise "unable to find the changelog_user in .sync.yml, or the author in metadata.json" if returnVal.nil?
+  puts "GitHubChangelogGenerator user:#{returnVal}"
+  returnVal
+end
+
+def changelog_project
+  return unless Rake.application.top_level_tasks.include? "changelog"
+  returnVal = nil || JSON.load(File.read('metadata.json'))['name']
+  raise "unable to find the changelog_project in .sync.yml or the name in metadata.json" if returnVal.nil?
+  puts "GitHubChangelogGenerator project:#{returnVal}"
+  returnVal
+end
+
+def changelog_future_release
+  return unless Rake.application.top_level_tasks.include? "changelog"
+  returnVal = "v%s" % JSON.load(File.read('metadata.json'))['version']
+  raise "unable to find the future_release (version) in metadata.json" if returnVal.nil?
+  puts "GitHubChangelogGenerator future_release:#{returnVal}"
+  returnVal
+end
+
+PuppetLint.configuration.send('disable_relative')
+
+if Bundler.rubygems.find_name('github_changelog_generator').any?
+  GitHubChangelogGenerator::RakeTask.new :changelog do |config|
+    raise "Set CHANGELOG_GITHUB_TOKEN environment variable eg 'export CHANGELOG_GITHUB_TOKEN=valid_token_here'" if Rake.application.top_level_tasks.include? "changelog" and ENV['CHANGELOG_GITHUB_TOKEN'].nil?
+    config.user = "#{changelog_user}"
+    config.project = "#{changelog_project}"
+    config.future_release = "#{changelog_future_release}"
+    config.exclude_labels = ['maintenance']
+    config.header = "# Change log\n\nAll notable changes to this project will be documented in this file. The format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/) and this project adheres to [Semantic Versioning](http://semver.org)."
+    config.add_pr_wo_labels = true
+    config.issues = false
+    config.merge_prefix = "### UNCATEGORIZED PRS; GO LABEL THEM"
+    config.configure_sections = {
+      "Changed" => {
+        "prefix" => "### Changed",
+        "labels" => ["backwards-incompatible"],
+      },
+      "Added" => {
+        "prefix" => "### Added",
+        "labels" => ["feature", "enhancement"],
+      },
+      "Fixed" => {
+        "prefix" => "### Fixed",
+        "labels" => ["bugfix"],
+      },
+    }
   end
-  Dir['spec/**/*.rb','lib/**/*.rb'].each do |ruby_file|
-    sh "ruby -c #{ruby_file}" unless ruby_file =~ /spec\/fixtures/
-  end
-  Dir['templates/**/*.erb'].each do |template|
-    sh "erb -P -x -T '-' #{template} | ruby -c"
+else
+  desc 'Generate a Changelog from GitHub'
+  task :changelog do
+    raise <<EOM
+The changelog tasks depends on unreleased features of the github_changelog_generator gem.
+Please manually add it to your .sync.yml for now, and run `pdk update`:
+---
+Gemfile:
+  optional:
+    ':development':
+      - gem: 'github_changelog_generator'
+        git: 'https://github.com/skywinder/github-changelog-generator'
+        ref: '20ee04ba1234e9e83eb2ffb5056e23d641c7a018'
+        condition: "Gem::Version.new(RUBY_VERSION.dup) >= Gem::Version.new('2.2.2')"
+EOM
   end
 end


--- spec/spec_helper.rb	2019-07-09 16:46:49.000000000 -0700
+++ spec/spec_helper.rb.pdknew	2019-09-23 11:02:53.449243425 -0700
@@ -1,94 +1,48 @@
 require 'puppetlabs_spec_helper/module_spec_helper'
-require 'beaker-rspec/beaker_shim'
-require 'beaker-rspec/helpers/serverspec'
-include BeakerRSpec::BeakerShim
+require 'rspec-puppet-facts'
 
-require 'pry'
+require 'spec_helper_local' if File.file?(File.join(File.dirname(__FILE__), 'spec_helper_local.rb'))
 
-#FACTER_DIRECTORY='/etc/puppetlabs/facter/facts.d'
-FACTER_DIRECTORY='/opt/puppetlabs/server/data/puppetserver/facts.d'
+include RspecPuppetFacts
 
-# UNSUPPORTED_PLATFORMS = ['Suse','windows','AIX','Solaris']
+default_facts = {
+  puppetversion: Puppet.version,
+  facterversion: Facter.version,
+}
 
-RSpec.configure do |c|
-  #Try to guess what nodeset to load based on the test we are running
-  #Rake's parallel execution uses Threads, so using enviroment variables 
-  #is not an option (all Threads will try to change the value of the environment variable)
-  product_line,file = c.files_to_run.first.split('/').last(2)
-  role              = file.sub(/_spec.rb/,'')
-  puts "Got #{product_line.upcase} #{role.upcase}"
-  # Enable color
-  c.tty = true
+default_fact_files = [
+  File.expand_path(File.join(File.dirname(__FILE__), 'default_facts.yml')),
+  File.expand_path(File.join(File.dirname(__FILE__), 'default_module_facts.yml')),
+]
 
-  # Define persistant hosts setting
-  c.add_setting :hosts, :default => []
-  # Define persistant options setting
-  c.add_setting :options, :default => {}
-  # Define persistant metadata object
-  c.add_setting :metadata, :default => {}
-  # Define persistant logger object
-  c.add_setting :logger, :default => nil
-  # Define persistant default node
-  c.add_setting :default_node, :default => nil
+default_fact_files.each do |f|
+  next unless File.exist?(f) && File.readable?(f) && File.size?(f)
 
-  #default option values
-  defaults = {
-    :nodeset     => 'default',
-  }
-  #read env vars
-  env_vars = {
-    :nodeset     => ENV['BEAKER_set'] || ENV['RS_SET'],
-    :nodesetfile => ENV['BEAKER_setfile'] || ENV['RS_SETFILE'],
-    :provision   => ENV['BEAKER_provision'] || ENV['RS_PROVISION'],
-    :keyfile     => ENV['BEAKER_keyfile'] || ENV['RS_KEYFILE'],
-    :debug       => ENV['BEAKER_debug'] || ENV['RS_DEBUG'],
-    :destroy     => ENV['BEAKER_destroy'] || ENV['RS_DESTROY'],
-  }.delete_if {|key, value| value.nil?}
-  #combine defaults and env_vars to determine overall options
-  options = defaults.merge(env_vars)
+  begin
+    default_facts.merge!(YAML.safe_load(File.read(f), [], [], true))
+  rescue => e
+    RSpec.configuration.reporter.message "WARNING: Unable to load #{f}: #{e}"
+  end
+end
 
-  # process options to construct beaker command string
-  nodesetfile = options[:nodesetfile] || File.join("role/spec/acceptance/nodesets/#{product_line}","#{role}.yaml")
-  fresh_nodes = options[:provision] == 'no' ? '--no-provision' : nil
-  keyfile     = options[:keyfile] ? ['--keyfile', options[:keyfile]] : nil
-  debug       = options[:debug] ? ['--log-level', 'debug'] : nil
+RSpec.configure do |c|
+  c.default_facts = default_facts
+  c.before :each do
+    # set to strictest setting for testing
+    # by default Puppet runs at warning level
+    Puppet.settings[:strict] = :warning
+  end
+  c.filter_run_excluding(bolt: true) unless ENV['GEM_BOLT']
+  c.after(:suite) do
+  end
+end
 
-  # Configure all nodes in nodeset
-  c.setup([fresh_nodes, '--hosts', nodesetfile, keyfile, debug].flatten.compact)
-  c.provision
-  c.validate
-  c.configure
-
-
-
-  module_root = File.expand_path(File.join(File.dirname(__FILE__), '..'))
-
-  c.formatter = :documentation
-
-  # Configure all nodes in nodeset
-#  c.before :suite do
-#    hosts.each do |host|
-#      #Get the role for this host
-#      role = host.host_hash[:roles]-['default']
-#      on host, "echo /dev/null > /var/log/messages"
-#      on host, "ntpdate 10.20.1.5"
-#      on host, "mkdir -p #{FACTER_DIRECTORY}"
-#      on host, "echo role=#{role[0]} > #{FACTER_DIRECTORY}/role.txt"
-#      on host, "echo aon_env=#{product_line}_aat > #{FACTER_DIRECTORY}/aon_env.txt"
-#      on host, puppet('config','set','environment',"#{product_line}_aat",'--section agent')
-#    end
-#  end
-
-
-  c.after :suite do
-    case options[:destroy]
-    when 'no'
-      # Don't cleanup
-    when 'onpass'
-      c.cleanup if RSpec.world.filtered_examples.values.flatten.none?(&:exception)
-    else
-      c.cleanup
-    end
+def ensure_module_defined(module_name)
+  module_name.split('::').reduce(Object) do |last_module, next_module|
+    last_module.const_set(next_module, Module.new) unless last_module.const_defined?(next_module, false)
+    last_module.const_get(next_module, false)
   end
 end
+
+# 'spec_overrides' from sync.yml will appear below this line
