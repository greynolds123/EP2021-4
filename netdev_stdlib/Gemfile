<<<<<<< HEAD
#This file is generated by ModuleSync, do not edit.

source ENV['GEM_SOURCE'] || "https://rubygems.org"
=======
# This file is generated by ModuleSync, do not edit.

source ENV['GEM_SOURCE'] || 'https://rubygems.org'
>>>>>>> f661b3a03526f113b1823084ffd4808cf261cf70

# Determines what type of gem is requested based on place_or_version.
def gem_type(place_or_version)
  if place_or_version =~ /^git:/
    :git
  elsif place_or_version =~ /^file:/
    :file
  else
    :gem
  end
end

# Find a location or specific version for a gem. place_or_version can be a
# version, which is most often used. It can also be git, which is specified as
# `git://somewhere.git#branch`. You can also use a file source location, which
# is specified as `file://some/location/on/disk`.
def location_for(place_or_version, fake_version = nil)
  if place_or_version =~ /^(git[:@][^#]*)#(.*)/
<<<<<<< HEAD
    [fake_version, { :git => $1, :branch => $2, :require => false }].compact
  elsif place_or_version =~ /^file:\/\/(.*)/
    ['>= 0', { :path => File.expand_path($1), :require => false }]
  else
    [place_or_version, { :require => false }]
=======
    [fake_version, { git: Regexp.last_match(1), branch: Regexp.last_match(2), require: false }].compact
  elsif place_or_version =~ /^file:\/\/(.*)/
    ['>= 0', { path: File.expand_path(Regexp.last_match(1)), require: false }]
  else
    [place_or_version, { require: false }]
>>>>>>> f661b3a03526f113b1823084ffd4808cf261cf70
  end
end

# Used for gem conditionals
supports_windows = false
ruby_version_segments = Gem::Version.new(RUBY_VERSION.dup).segments
minor_version = "#{ruby_version_segments[0]}.#{ruby_version_segments[1]}"

group :development do
<<<<<<< HEAD
  gem "puppet-module-posix-default-r#{minor_version}",    :require => false, :platforms => "ruby"
  gem "puppet-module-win-default-r#{minor_version}",      :require => false, :platforms => ["mswin", "mingw", "x64_mingw"]
  gem "puppet-module-posix-dev-r#{minor_version}",        :require => false, :platforms => "ruby"
  gem "puppet-module-win-dev-r#{minor_version}", '0.0.7', :require => false, :platforms => ["mswin", "mingw", "x64_mingw"]
  gem "json_pure", '<= 2.0.1',                            :require => false if Gem::Version.new(RUBY_VERSION.dup) < Gem::Version.new('2.0.0')
  gem "fast_gettext", '1.1.0',                            :require => false if Gem::Version.new(RUBY_VERSION.dup) < Gem::Version.new('2.1.0')
  gem "fast_gettext",                                     :require => false if Gem::Version.new(RUBY_VERSION.dup) >= Gem::Version.new('2.1.0')
  gem "rspec-puppet",                                     :require => false
end

group :system_tests do
  gem "puppet-module-posix-system-r#{minor_version}",                            :require => false, :platforms => "ruby"
  gem "puppet-module-win-system-r#{minor_version}",                              :require => false, :platforms => ["mswin", "mingw", "x64_mingw"]
  gem "beaker", *location_for(ENV['BEAKER_VERSION'] || '>= 3')                  
  gem "beaker-pe",                                                               :require => false
  gem "beaker-rspec", *location_for(ENV['BEAKER_RSPEC_VERSION'])                
  gem "beaker-hostgenerator", *location_for(ENV['BEAKER_HOSTGENERATOR_VERSION'])
  gem "beaker-abs", *location_for(ENV['BEAKER_ABS_VERSION'] || '~> 0.1')        
  gem "puppet-blacksmith", '~> 3.4',                                             :require => false
=======
  gem "puppet-module-posix-default-r#{minor_version}",    require: false, platforms: 'ruby'
  gem "puppet-module-posix-dev-r#{minor_version}",        require: false, platforms: 'ruby'
  gem "puppet-module-win-default-r#{minor_version}",      require: false, platforms: %w[mswin mingw x64_mingw]
  gem "puppet-module-win-dev-r#{minor_version}", '0.0.7', require: false, platforms: %w[mswin mingw x64_mingw]
  gem 'fast_gettext', '1.1.0',                            require: false if Gem::Version.new(RUBY_VERSION.dup) < Gem::Version.new('2.1.0')
  gem 'fast_gettext',                                     require: false if Gem::Version.new(RUBY_VERSION.dup) >= Gem::Version.new('2.1.0')
  gem 'json_pure', '<= 2.0.1',                            require: false if Gem::Version.new(RUBY_VERSION.dup) < Gem::Version.new('2.0.0')
  gem 'pry',                                              require: false
  gem 'puppet-resource_api',                              require: false
  gem 'rspec-puppet',                                     require: false
  gem 'shoulda-matchers', '~> 3.1',                       require: false
end

group :system_tests do
  gem "puppet-module-posix-system-r#{minor_version}",                            require: false, platforms: 'ruby'
  gem "puppet-module-win-system-r#{minor_version}",                              require: false, platforms: %w[mswin mingw x64_mingw]
  gem 'beaker', *location_for(ENV['BEAKER_VERSION'] || '>= 3')
  gem 'beaker-abs', *location_for(ENV['BEAKER_ABS_VERSION'] || '~> 0.1')
  gem 'beaker-hostgenerator', *location_for(ENV['BEAKER_HOSTGENERATOR_VERSION'])
  gem 'beaker-pe', require: false
  gem 'beaker-rspec', *location_for(ENV['BEAKER_RSPEC_VERSION'])
  gem 'puppet-blacksmith', '~> 3.4', require: false
>>>>>>> f661b3a03526f113b1823084ffd4808cf261cf70
end

gem 'puppet', *location_for(ENV['PUPPET_GEM_VERSION'])

# Only explicitly specify Facter/Hiera if a version has been specified.
# Otherwise it can lead to strange bundler behavior. If you are seeing weird
# gem resolution behavior, try setting `DEBUG_RESOLVER` environment variable
# to `1` and then run bundle install.
gem 'facter', *location_for(ENV['FACTER_GEM_VERSION']) if ENV['FACTER_GEM_VERSION']
gem 'hiera', *location_for(ENV['HIERA_GEM_VERSION']) if ENV['HIERA_GEM_VERSION']

<<<<<<< HEAD

# Evaluate Gemfile.local if it exists
if File.exists? "#{__FILE__}.local"
  eval(File.read("#{__FILE__}.local"), binding)
end

# Evaluate ~/.gemfile if it exists
if File.exists?(File.join(Dir.home, '.gemfile'))
=======
# Evaluate Gemfile.local if it exists
eval(File.read("#{__FILE__}.local"), binding) if File.exist? "#{__FILE__}.local"

# Evaluate ~/.gemfile if it exists
if File.exist?(File.join(Dir.home, '.gemfile'))
>>>>>>> f661b3a03526f113b1823084ffd4808cf261cf70
  eval(File.read(File.join(Dir.home, '.gemfile')), binding)
end

# vim:ft=ruby
